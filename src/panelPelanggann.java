/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import javax.swing.*;
import java.sql.*;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author asus
 */
public class panelPelanggann extends javax.swing.JPanel {
    private ArrayList<Barang> keranjangBelanja;
    /**
     * Creates new form panelPelanggan
     */
    public panelPelanggann() {
        initComponents();
        keranjangBelanja = new ArrayList<>();
        showData();
    }
    
     private void showData() {
        DefaultTableModel model = (DefaultTableModel) tblBarang.getModel();
        model.setRowCount(0); // Menghapus semua baris yang ada di tabel

        String sql = "SELECT ID_Barang, Nama_Barang, Harga_jual FROM data.Barang";

        try (Connection conn = koneksi.getKoneksi(); // Menggunakan koneksi dari class koneksi.java
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                model.addRow(new Object[]{
                    false,
                    rs.getString("ID_Barang"),
                    rs.getString("Nama_Barang"),
                    rs.getString("Harga_Jual"),
                });
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error memuat data supplier: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblBarang = new javax.swing.JTable();
        btnTambah = new javax.swing.JButton();
        btnKeranjang = new javax.swing.JButton();
        btnSimpan = new javax.swing.JButton();

        setOpaque(false);

        tblBarang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Pilih", "ID Barang", "Nama Barang", "Harga"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBarang.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(tblBarang);
        tblBarang.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (tblBarang.getColumnModel().getColumnCount() > 0) {
            tblBarang.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        btnTambah.setText("Tambah Keranjang");
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        btnKeranjang.setText("Keranjang");
        btnKeranjang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKeranjangActionPerformed(evt);
            }
        });

        btnSimpan.setText("Simpan");
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 753, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSimpan)
                .addGap(18, 18, 18)
                .addComponent(btnTambah)
                .addGap(18, 18, 18)
                .addComponent(btnKeranjang)
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTambah)
                    .addComponent(btnKeranjang)
                    .addComponent(btnSimpan))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        StringBuilder barangDitambahkan = new StringBuilder("Barang berikut berhasil ditambahkan/diupdate:\n");
    int jumlahDitambahkan = 0;

    // Loop melalui setiap baris di tabel produk
    for (int i = 0; i < tblBarang.getRowCount(); i++) {
        // Cek apakah checkbox di kolom 0 dicentang
        Boolean isChecked = (Boolean) tblBarang.getValueAt(i, 0);

        if (isChecked != null && isChecked) {
            // Jika dicentang, ambil data dari kolom lain
           
            String idDipilih = (String) tblBarang.getValueAt(i, 1);
            String namaDipilih = (String) tblBarang.getValueAt(i, 2);
            int hargaDipilih = Integer.parseInt(tblBarang.getValueAt(i, 3).toString());

            // --- LOGIKA BARU DIMULAI DI SINI ---
            boolean barangSudahAdaDiKeranjang = false;

            // 1. Lakukan pencarian di dalam 'keranjangBelanja'
            for (Barang itemDiKeranjang : keranjangBelanja) {
                // Bandingkan berdasarkan nama barang
                if (itemDiKeranjang.getNama().equals(namaDipilih)) {
                    // 2. Jika barang SUDAH ADA, cukup tambah kuantitasnya
                    itemDiKeranjang.tambahKuantitas(1);
                    barangSudahAdaDiKeranjang = true; // Beri tanda bahwa barang sudah ada
                    break; // Hentikan pencarian karena sudah ketemu
                }
            }

            // 3. Jika setelah dicek ternyata barang BELUM ADA
            if (!barangSudahAdaDiKeranjang) {
                // Baru buat objek baru dan tambahkan ke keranjang
                keranjangBelanja.add(new Barang(idDipilih,namaDipilih, hargaDipilih));
            }
            // --- LOGIKA BARU SELESAI ---

            // Update pesan dan counter (ini sama seperti kode Anda sebelumnya)
            barangDitambahkan.append("- ").append(namaDipilih).append("\n");
            jumlahDitambahkan++;
        }
    }

    // Bagian ini tidak ada perubahan dari kode Anda
    if (jumlahDitambahkan > 0) {
        for (int i = 0; i < tblBarang.getRowCount(); i++) {
            tblBarang.setValueAt(false, i, 0);
        }
        JOptionPane.showMessageDialog(this, barangDitambahkan.toString(), "Sukses", JOptionPane.INFORMATION_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(this, "Tidak ada barang yang dipilih.", "Peringatan", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_btnTambahActionPerformed

    private void btnKeranjangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKeranjangActionPerformed
        // Cek jika keranjang kosong (tidak ada perubahan di sini)
    if (keranjangBelanja.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Keranjang belanja Anda masih kosong.", "Info Keranjang", JOptionPane.INFORMATION_MESSAGE);
        return;
    }

    StringBuilder detailKeranjang = new StringBuilder("Isi Keranjang Belanja Anda:\n\n");
    int totalBelanja = 0;

    // Iterasi melalui ArrayList keranjangBelanja
    for (Barang barang : keranjangBelanja) {
        
        // --- PERUBAHAN 1: Tambahkan Kuantitas pada Teks ---
        detailKeranjang.append("- ")
                       .append(barang.getNama())
                       .append(" (Rp")
                       .append(barang.getHarga())
                       .append(") x") // Tambahkan "x" sebagai penanda kuantitas
                       .append(barang.getKuantitas()) // Panggil method getKuantitas()
                       .append("\n");

        // --- PERUBAHAN 2: Hitung Total Berdasarkan Subtotal (Harga * Kuantitas) ---
        // Cara lama: totalBelanja += barang.getHarga(); (INI SALAH)
        totalBelanja += barang.getSubtotal(); // Cara baru yang benar
    }

    detailKeranjang.append("\n--------------------\n");
    detailKeranjang.append("Total Belanja: Rp. ").append(totalBelanja);

    // Tampilkan pop-up (tidak ada perubahan di sini)
    JOptionPane.showMessageDialog(this, detailKeranjang.toString(), "Detail Keranjang Belanja", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_btnKeranjangActionPerformed

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        if (keranjangBelanja.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Keranjang belanja kosong. Silakan tambahkan barang terlebih dahulu.");
        return;
    }

    Connection conn = null;
    PreparedStatement pstmtHeader = null;
    PreparedStatement pstmtDetail = null;
    ResultSet generatedKeys = null;
    long idTransaksiBaru = -1; // Variabel untuk menyimpan ID Transaksi yang baru

    // Siapkan query SQL
    String sqlHeader = "INSERT INTO data.transaksi_penjualan (ID_Pelanggan, Total_Transaksi) VALUES (?, ?)";
    String sqlDetail = "INSERT INTO data.detail_penjualan (ID_Transaksi, ID_Barang, Jumlah, Harga_Saat_Transaksi) VALUES (?, ?, ?, ?)";

    try {
        // Dapatkan koneksi dan mulai transaksi secara manual
        conn = koneksi.getKoneksi();
        conn.setAutoCommit(false); // SANGAT PENTING: Memulai mode transaksi

        // --- LANGKAH 1: SIMPAN HEADER TRANSAKSI ---
        
        // Hitung total belanja dari semua item di keranjang
        int totalBelanja = 0;
        for (Barang item : keranjangBelanja) {
            totalBelanja += item.getSubtotal();
        }

        // Siapkan dan eksekusi statement untuk header
        pstmtHeader = conn.prepareStatement(sqlHeader, Statement.RETURN_GENERATED_KEYS);
        pstmtHeader.setInt(1, session.getIdPelanggan()); // Ambil ID pengguna dari session
        pstmtHeader.setInt(2, totalBelanja);
        
        int headerRowsAffected = pstmtHeader.executeUpdate();
        if (headerRowsAffected == 0) {
            throw new SQLException("Gagal menyimpan header transaksi, tidak ada baris yang ditambahkan.");
        }

        // Ambil ID_Transaksi yang baru saja dibuat oleh database
        generatedKeys = pstmtHeader.getGeneratedKeys();
        if (generatedKeys.next()) {
            idTransaksiBaru = generatedKeys.getLong(1);
        } else {
            throw new SQLException("Gagal mendapatkan ID untuk transaksi baru.");
        }

        // --- LANGKAH 2: SIMPAN DETAIL TRANSAKSI (SEMUA BARANG DI KERANJANG) ---
        
        // Siapkan statement untuk detail
        pstmtDetail = conn.prepareStatement(sqlDetail);

        // Loop melalui keranjang dan tambahkan setiap item ke dalam "batch"
        for (Barang item : keranjangBelanja) {
            pstmtDetail.setLong(1, idTransaksiBaru); // Gunakan ID Transaksi yang sama untuk semua item
            pstmtDetail.setString(2, item.getIdBarang());
            pstmtDetail.setInt(3, item.getKuantitas());
            pstmtDetail.setInt(4, item.getHarga());
            pstmtDetail.addBatch(); // Tambahkan query ini ke dalam antrian batch
        }

        // Eksekusi semua query dalam batch sekaligus
        pstmtDetail.executeBatch();

        // --- LANGKAH 3: SELESAIKAN TRANSAKSI ---
        
        // Jika semua query berhasil, simpan semua perubahan ke database secara permanen
        conn.commit(); 
        
        JOptionPane.showMessageDialog(this, "Pesanan berhasil disimpan dengan ID Transaksi: " + idTransaksiBaru);
        
        // Kosongkan keranjang di aplikasi dan refresh tabel
        keranjangBelanja.clear();
        //refreshTabelKeranjang(); // Panggil method untuk update JTable keranjang

    } catch (SQLException e) {
        // Jika terjadi error di mana pun di dalam blok 'try', batalkan semua perubahan
        try {
            if (conn != null) {
                conn.rollback(); // Batalkan semua query yang sudah dijalankan
                JOptionPane.showMessageDialog(this, "Terjadi kesalahan database. Transaksi dibatalkan.\nError: " + e.getMessage());
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        e.printStackTrace();
    } finally {
        // Blok 'finally' untuk memastikan semua koneksi ditutup, baik berhasil maupun gagal
        try {
            if (generatedKeys != null) generatedKeys.close();
            if (pstmtHeader != null) pstmtHeader.close();
            if (pstmtDetail != null) pstmtDetail.close();
            if (conn != null) {
                conn.setAutoCommit(true); // Kembalikan koneksi ke mode default
                conn.close();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    }//GEN-LAST:event_btnSimpanActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnKeranjang;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JButton btnTambah;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblBarang;
    // End of variables declaration//GEN-END:variables
}
