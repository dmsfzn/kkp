/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.io.InputStream;
import javax.swing.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.table.DefaultTableModel;
import java.util.HashMap;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
/**
 *
 * @author asus
 */
public class panelPelanggann extends javax.swing.JPanel {
    private ArrayList<Barang> keranjangBelanja;
    private long idTransaksiTerakhir = 0;
    /**
     * Creates new form panelPelanggan
     */
    public panelPelanggann() {
        initComponents();
        keranjangBelanja = new ArrayList<>();
        greetings.setText("Hello, " + session.getUsername());
        showData();
        
        // Non-aktifkan tombol cetak saat form pertama kali dibuka
        btnKwitansi.setEnabled(false); 
        
        // Hubungkan event klik untuk tombol cetak
        btnKwitansi.addActionListener(this::btnKwitansiActionPerformed);
    }
    
     private void showData() {
        DefaultTableModel model = (DefaultTableModel) tblBarang.getModel();
        model.setRowCount(0); // Menghapus semua baris yang ada di tabel

        String sql = "SELECT ID_Barang, Nama_Barang, Harga_jual FROM data.Barang";

        try (Connection conn = koneksi.getKoneksi(); // Menggunakan koneksi dari class koneksi.java
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                model.addRow(new Object[]{
                    false,
                    rs.getString("ID_Barang"),
                    rs.getString("Nama_Barang"),
                    rs.getString("Harga_Jual"),
                });
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error memuat data supplier: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    
private void cetakKwitansiJasper(long idTransaksi) {
    try (Connection conn = koneksi.getKoneksi()) {
        HashMap<String, Object> parameters = new HashMap<>();
        parameters.put("P_ID_TRANSAKSI", idTransaksi);

        // 1. Ubah ekstensi file dari .jrxml menjadi .jasper
        InputStream reportStream = getClass().getResourceAsStream("/Report/kwitansi.jasper");
        
        if (reportStream == null) {
            JOptionPane.showMessageDialog(this, 
                "File laporan (kwitansi.jasper) tidak ditemukan!\nPastikan Anda sudah meng-kompilasi .jrxml dan meletakkan file .jasper di package 'Report'.", 
                "Error Laporan", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // 2. Gunakan JRLoader untuk memuat file yang sudah dikompilasi.
        // Tidak ada lagi proses kompilasi di sini.
        JasperReport jasperReport = (JasperReport) JRLoader.loadObject(reportStream);

        // Kode di bawah ini tetap sama persis
        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, conn);
        JasperViewer.viewReport(jasperPrint, false);

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, 
            "Gagal mencetak kwitansi.\nError: " + e.getMessage(), 
            "Error Cetak", 
            JOptionPane.ERROR_MESSAGE);
    }
}
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblBarang = new javax.swing.JTable();
        btnTambah = new javax.swing.JButton();
        btnKeranjang = new javax.swing.JButton();
        btnSimpan = new javax.swing.JButton();
        greetings = new javax.swing.JLabel();
        btnKwitansi = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();

        setOpaque(false);

        jScrollPane1.setOpaque(false);

        tblBarang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Pilih", "ID Barang", "Nama Barang", "Harga"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBarang.setColumnSelectionAllowed(true);
        tblBarang.setOpaque(false);
        jScrollPane1.setViewportView(tblBarang);
        tblBarang.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (tblBarang.getColumnModel().getColumnCount() > 0) {
            tblBarang.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        btnTambah.setText("Tambah Keranjang");
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        btnKeranjang.setText("Keranjang");
        btnKeranjang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKeranjangActionPerformed(evt);
            }
        });

        btnSimpan.setText("Selesai Belanja");
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        greetings.setText("jLabel1");

        btnKwitansi.setText("Kuitansi");
        btnKwitansi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKwitansiActionPerformed(evt);
            }
        });

        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 753, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnTambah)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnKeranjang)
                        .addGap(50, 50, 50)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnKwitansi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnHapus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSimpan)
                .addGap(28, 28, 28)
                .addComponent(greetings)
                .addGap(72, 72, 72))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSimpan)
                        .addComponent(btnKeranjang)
                        .addComponent(btnHapus))
                    .addComponent(greetings))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTambah)
                    .addComponent(btnKwitansi))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        StringBuilder barangDitambahkan = new StringBuilder("Barang berikut berhasil ditambahkan/diupdate:\n");
    int jumlahDitambahkan = 0;

    // Loop melalui setiap baris di tabel produk
    for (int i = 0; i < tblBarang.getRowCount(); i++) {
        // Cek apakah checkbox di kolom 0 dicentang
        Boolean isChecked = (Boolean) tblBarang.getValueAt(i, 0);

        if (isChecked != null && isChecked) {
            // Jika dicentang, ambil data dari kolom lain
           
            String idDipilih = (String) tblBarang.getValueAt(i, 1);
            String namaDipilih = (String) tblBarang.getValueAt(i, 2);
            int hargaDipilih = Integer.parseInt(tblBarang.getValueAt(i, 3).toString());

            // --- LOGIKA BARU DIMULAI DI SINI ---
            boolean barangSudahAdaDiKeranjang = false;

            // 1. Lakukan pencarian di dalam 'keranjangBelanja'
            for (Barang itemDiKeranjang : keranjangBelanja) {
                // Bandingkan berdasarkan nama barang
                if (itemDiKeranjang.getNama().equals(namaDipilih)) {
                    // 2. Jika barang SUDAH ADA, cukup tambah kuantitasnya
                    itemDiKeranjang.tambahKuantitas(1);
                    barangSudahAdaDiKeranjang = true; // Beri tanda bahwa barang sudah ada
                    break; // Hentikan pencarian karena sudah ketemu
                }
            }

            // 3. Jika setelah dicek ternyata barang BELUM ADA
            if (!barangSudahAdaDiKeranjang) {
                // Baru buat objek baru dan tambahkan ke keranjang
                keranjangBelanja.add(new Barang(idDipilih,namaDipilih, hargaDipilih));
            }
            // --- LOGIKA BARU SELESAI ---

            // Update pesan dan counter (ini sama seperti kode Anda sebelumnya)
            barangDitambahkan.append("- ").append(namaDipilih).append("\n");
            jumlahDitambahkan++;
        }
    }

    // Bagian ini tidak ada perubahan dari kode Anda
    if (jumlahDitambahkan > 0) {
        for (int i = 0; i < tblBarang.getRowCount(); i++) {
            tblBarang.setValueAt(false, i, 0);
        }
        JOptionPane.showMessageDialog(this, barangDitambahkan.toString(), "Sukses", JOptionPane.INFORMATION_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(this, "Tidak ada barang yang dipilih.", "Peringatan", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_btnTambahActionPerformed

    private void btnKeranjangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKeranjangActionPerformed
        // Cek jika keranjang kosong (tidak ada perubahan di sini)
    if (keranjangBelanja.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Keranjang belanja Anda masih kosong.", "Info Keranjang", JOptionPane.INFORMATION_MESSAGE);
        return;
    }

    StringBuilder detailKeranjang = new StringBuilder("Isi Keranjang Belanja Anda:\n\n");
    int totalBelanja = 0;

    // Iterasi melalui ArrayList keranjangBelanja
    for (Barang barang : keranjangBelanja) {
        
        // --- PERUBAHAN 1: Tambahkan Kuantitas pada Teks ---
        detailKeranjang.append("- ")
                       .append(barang.getNama())
                       .append(" (Rp")
                       .append(barang.getHarga())
                       .append(") x") // Tambahkan "x" sebagai penanda kuantitas
                       .append(barang.getKuantitas()) // Panggil method getKuantitas()
                       .append("\n");

        // --- PERUBAHAN 2: Hitung Total Berdasarkan Subtotal (Harga * Kuantitas) ---
        // Cara lama: totalBelanja += barang.getHarga(); (INI SALAH)
        totalBelanja += barang.getSubtotal(); // Cara baru yang benar
    }

    detailKeranjang.append("\n--------------------\n");
    detailKeranjang.append("Total Belanja: Rp. ").append(totalBelanja);

    // Tampilkan pop-up (tidak ada perubahan di sini)
    JOptionPane.showMessageDialog(this, detailKeranjang.toString(), "Detail Keranjang Belanja", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_btnKeranjangActionPerformed

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        if (keranjangBelanja.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Keranjang belanja kosong. Silakan tambahkan barang terlebih dahulu.");
            return;
        }

        // Variabel untuk menampung ID yang akan dicetak nanti
        long idUntukDicetak = 0; 

        // --- BLOK UNTUK MENYIMPAN TRANSAKSI ---
        Connection conn = null;
        PreparedStatement pstmtHeader = null;
        PreparedStatement pstmtDetail = null;
        ResultSet generatedKeys = null;

        String sqlHeader = "INSERT INTO data.transaksi_penjualan (ID_Pelanggan, Total_Transaksi, tanggal_transaksi) VALUES (?, ?, NOW())";
        String sqlDetail = "INSERT INTO data.detail_penjualan (ID_Transaksi, ID_Barang, Jumlah, Harga_Saat_Transaksi) VALUES (?, ?, ?, ?)";

        try {
            conn = koneksi.getKoneksi();
            conn.setAutoCommit(false);

            int totalBelanja = 0;
            for (Barang item : keranjangBelanja) {
                totalBelanja += item.getSubtotal();
            }

            pstmtHeader = conn.prepareStatement(sqlHeader, Statement.RETURN_GENERATED_KEYS);
            pstmtHeader.setInt(1, session.getIdPelanggan());
            pstmtHeader.setInt(2, totalBelanja);
            pstmtHeader.executeUpdate();

            generatedKeys = pstmtHeader.getGeneratedKeys();
            if (generatedKeys.next()) {
                long idTransaksiBaru = generatedKeys.getLong(1);
            
                // Simpan ID ke variabel sementara, JANGAN panggil cetak di sini
                idUntukDicetak = idTransaksiBaru; 
                System.out.println(idTransaksiBaru);
                // Simpan juga ke variabel kelas untuk tombol "Cetak Ulang"
                this.idTransaksiTerakhir = idTransaksiBaru;
            } else {
                throw new SQLException("Gagal mendapatkan ID untuk transaksi baru.");
            }

            pstmtDetail = conn.prepareStatement(sqlDetail);
            for (Barang item : keranjangBelanja) {
                pstmtDetail.setLong(1, idUntukDicetak);
                pstmtDetail.setString(2, item.getIdBarang());
                pstmtDetail.setInt(3, item.getKuantitas());
                pstmtDetail.setInt(4, item.getHarga());
                pstmtDetail.addBatch();
            }
            pstmtDetail.executeBatch();

            // Selesaikan transaksi
            conn.commit(); 
        
            JOptionPane.showMessageDialog(this, "Pesanan berhasil disimpan dengan ID Transaksi: " + idUntukDicetak);
        
            // Aktifkan tombol cetak
            btnKwitansi.setEnabled(true);
        
            keranjangBelanja.clear();
            // refreshTabelKeranjang(); // Jika ada

        } catch (SQLException e) {
            try {
                if (conn != null) conn.rollback();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan database. Transaksi dibatalkan.\nError: " + e.getMessage());
        } finally {
            // Pastikan semua resource ditutup
            try {
                if (generatedKeys != null) generatedKeys.close();
                if (pstmtHeader != null) pstmtHeader.close();
                if (pstmtDetail != null) pstmtDetail.close();
                if (conn != null) conn.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        // --- AKHIR DARI BLOK PENYIMPANAN ---
        // --- PROSES BARU UNTUK MENCETAK KWITANSI ---
        // Cek apakah ada ID yang valid untuk dicetak
        if (idUntukDicetak > 0) {
            // Panggil metode cetak DI LUAR blok try-catch-finally sebelumnya
            cetakKwitansiJasper(idUntukDicetak);
        }
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
          ArrayList<String> namaBarangDihapus = new ArrayList<>();
          StringBuilder pesanKonfirmasi = new StringBuilder("Barang berikut telah dihapus dari keranjang:\n");

          // Loop melalui setiap baris di tabel untuk menemukan yang dicentang
          for (int i = 0; i < tblBarang.getRowCount(); i++) {
              Boolean isChecked = (Boolean) tblBarang.getValueAt(i, 0);
              // Jika checkbox dicentang
              if (isChecked != null && isChecked) {
                  // Ambil nama barang dari baris yang dicentang
                  String namaBarang = (String) tblBarang.getValueAt(i, 2);
                  namaBarangDihapus.add(namaBarang);
                  pesanKonfirmasi.append("- ").append(namaBarang).append("\n");
              }
          }

          // Jika tidak ada barang yang dipilih, tampilkan peringatan
          if (namaBarangDihapus.isEmpty()) {
              JOptionPane.showMessageDialog(this, "Tidak ada barang yang dipilih untuk dihapus.", "Peringatan", JOptionPane.WARNING_MESSAGE);
              return; // Keluar dari metode karena tidak ada yang perlu dilakukan
          }

          // Hapus item dari keranjangBelanja yang namanya cocok dengan yang ada di daftar 'namaBarangDihapus'
          // Menggunakan lambda expression (removeIf) adalah cara yang modern dan efisien
         keranjangBelanja.removeIf(item -> namaBarangDihapus.contains(item.getNama()));

          // Setelah menghapus, hilangkan semua centang di tabel
         for (int i = 0; i < tblBarang.getRowCount(); i++) {
             tblBarang.setValueAt(false, i, 0);
         }
    
            // Tampilkan pesan konfirmasi kepada pengguna
         JOptionPane.showMessageDialog(this, pesanKonfirmasi.toString(), "Sukses", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnKwitansiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKwitansiActionPerformed
        if (this.idTransaksiTerakhir == 0) {
        JOptionPane.showMessageDialog(this, 
            "Belum ada transaksi yang selesai untuk dicetak ulang.", 
            "Informasi", 
            JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Langsung gunakan ID yang sudah tersimpan untuk mencetak kembali
        cetakKwitansiJasper(this.idTransaksiTerakhir);
    }//GEN-LAST:event_btnKwitansiActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnKeranjang;
    private javax.swing.JButton btnKwitansi;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JButton btnTambah;
    private javax.swing.JLabel greetings;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblBarang;
    // End of variables declaration//GEN-END:variables
}
