/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import javax.swing.*;
import java.sql.*;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author asus
 */
public class panelTrSupp extends javax.swing.JPanel {
    private ArrayList<Barang> keranjangBelanja;
    /**
     * Creates new form panelPelanggan
     */
    public panelTrSupp() {
        initComponents();
        keranjangBelanja = new ArrayList<>();
        showData();
    }
    
   private void showData() {
    DefaultTableModel model = (DefaultTableModel) tblSupp.getModel();
    model.setRowCount(0);

    String sql = "SELECT ID_Supplier, Nama_Barang, SUM(Harga_Beli) AS Total " +
                 "FROM data.barang " +
                 "GROUP BY ID_Supplier, Nama_Barang WITH ROLLUP";

    // Tahap 1: Siapkan wadah untuk menyimpan data sementara
    // List untuk semua baris detail barang
    java.util.List<Object[]> detailRows = new java.util.ArrayList<>();
    // Map untuk menyimpan subtotal per supplier <ID_Supplier, Nilai_Total>
    java.util.Map<String, Integer> subTotals = new java.util.HashMap<>();

    try (Connection conn = koneksi.getKoneksi();
         PreparedStatement pstmt = conn.prepareStatement(sql);
         ResultSet rs = pstmt.executeQuery()) {

        // Tahap 2: Loop pertama untuk memisahkan data detail dan subtotal
        while (rs.next()) {
            String idSupplier = rs.getString("ID_Supplier");
            String namaBarang = rs.getString("Nama_Barang");
            int total = rs.getInt("Total");

            // Abaikan baris Grand Total
            if (idSupplier == null) {
                continue;
            }

            // Jika ini adalah baris subtotal, simpan nilainya di Map
            if (namaBarang == null) {
                subTotals.put(idSupplier, total);
            }
            // Jika ini adalah baris detail, simpan sebagai Object[] di List
            else {
                // Kolom: ID Supplier, Nama Barang, Harga Beli, Total
                detailRows.add(new Object[]{idSupplier, namaBarang, total, ""});
            }
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error memuat data: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
        return; // Hentikan eksekusi jika ada error
    }

    // Tahap 3: Loop kedua untuk memproses dan menampilkan ke JTable
    String supplierTerkini = "";
    for (int i = 0; i < detailRows.size(); i++) {
        Object[] currentRow = detailRows.get(i);
        String idSupplierSaatIni = (String) currentRow[0];

        // Cek apakah ini baris terakhir untuk grup supplier ini
        boolean isLastRowInGroup = (i == detailRows.size() - 1) ||
                                   !idSupplierSaatIni.equals(detailRows.get(i + 1)[0]);

        // Jika ini baris terakhir dalam grup, ambil subtotal dari Map dan letakkan di kolom "Total"
        if (isLastRowInGroup) {
            if (subTotals.containsKey(idSupplierSaatIni)) {
                currentRow[3] = subTotals.get(idSupplierSaatIni);
            }
        }

        // Logika untuk mengosongkan ID Supplier jika sama dengan baris sebelumnya
        if (idSupplierSaatIni.equals(supplierTerkini)) {
            currentRow[0] = ""; // Kosongkan ID Supplier
        } else {
            supplierTerkini = idSupplierSaatIni; // Update supplier terkini
        }
        
        // Masukkan baris yang sudah diproses ke JTable
        model.addRow(currentRow);
    }
}
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblSupp = new javax.swing.JTable();

        setOpaque(false);

        tblSupp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID Supplier", "Nama Barang", "Harga Beli", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSupp.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(tblSupp);
        tblSupp.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 753, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblSupp;
    // End of variables declaration//GEN-END:variables
}
