/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import javax.swing.*;
import java.sql.*;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author asus
 */
public class panelCust extends javax.swing.JPanel {
    private ArrayList<Barang> keranjangBelanja;
    /**
     * Creates new form panelPelanggan
     */
    public panelCust() {
        initComponents();
        keranjangBelanja = new ArrayList<>();
        showData();
    }
    
     private void showData() {
        DefaultTableModel model = (DefaultTableModel) tblBarang.getModel();
        model.setRowCount(0); // Menghapus semua baris yang ada di tabel

        String sql = "SELECT Nama_Barang, Harga_jual FROM data.Barang";

        try (Connection conn = koneksi.getKoneksi(); // Menggunakan koneksi dari class koneksi.java
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                model.addRow(new Object[]{
                    false,
                    rs.getString("Nama_Barang"),
                    rs.getString("Harga_Jual"),
                });
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error memuat data supplier: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblBarang = new javax.swing.JTable();
        btnTambah = new javax.swing.JButton();
        btnKeranjang = new javax.swing.JButton();

        setOpaque(false);

        tblBarang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Pilih", "Nama Barang", "Harga"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBarang.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(tblBarang);
        tblBarang.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (tblBarang.getColumnModel().getColumnCount() > 0) {
            tblBarang.getColumnModel().getColumn(0).setResizable(false);
            tblBarang.getColumnModel().getColumn(0).setPreferredWidth(1);
        }

        btnTambah.setText("jButton1");
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        btnKeranjang.setText("jButton2");
        btnKeranjang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKeranjangActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 753, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnTambah)
                .addGap(18, 18, 18)
                .addComponent(btnKeranjang)
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTambah)
                    .addComponent(btnKeranjang))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        StringBuilder barangDitambahkan = new StringBuilder("Barang berikut berhasil ditambahkan/diupdate:\n");
    int jumlahDitambahkan = 0;

    // Loop melalui setiap baris di tabel produk
    for (int i = 0; i < tblBarang.getRowCount(); i++) {
        Boolean isChecked = (Boolean) tblBarang.getValueAt(i, 0);

        if (isChecked != null && isChecked) {
            // Ambil detail barang dari baris yang dicentang
            String idDipilih = (String) tblBarang.getValueAt(i, 1);
            String namaDipilih = (String) tblBarang.getValueAt(i, 2);
            int hargaDipilih = Integer.parseInt(tblBarang.getValueAt(i, 3).toString());

            boolean barangSudahAda = false;

            // ---- LOGIKA INTI: Cari dulu di keranjang ----
            for (Barang itemDiKeranjang : keranjangBelanja) {
                // Bandingkan berdasarkan ID yang unik
                if (itemDiKeranjang.getIdBarang().equals(idDipilih)) {
                    // Jika SUDAH ADA, cukup tambah kuantitasnya
                    itemDiKeranjang.tambahKuantitas(1);
                    barangSudahAda = true;
                    break; // Keluar dari loop pencarian karena sudah ketemu
                }
            }

            // Jika setelah dicek ternyata BELUM ADA
            if (!barangSudahAda) {
                // Buat objek Barang baru dan tambahkan ke keranjang
                keranjangBelanja.add(new Barang(idDipilih, namaDipilih, hargaDipilih));
            }

            // Update pesan dan counter (ini tetap sama)
            barangDitambahkan.append("- ").append(namaDipilih).append("\n");
            jumlahDitambahkan++;
        }
    }

    // Bagian akhir ini sama persis dengan kode Anda sebelumnya
    if (jumlahDitambahkan > 0) {
        // Uncheck semua checkbox setelah selesai
        for (int i = 0; i < tblBarang.getRowCount(); i++) {
            tblBarang.setValueAt(false, i, 0);
        }
        JOptionPane.showMessageDialog(this, barangDitambahkan.toString(), "Sukses", JOptionPane.INFORMATION_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(this, "Tidak ada barang yang dipilih.", "Peringatan", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_btnTambahActionPerformed

    private void btnKeranjangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKeranjangActionPerformed
       // Cek apakah keranjang kosong
        if (keranjangBelanja.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Keranjang belanja Anda masih kosong.", "Info Keranjang", JOptionPane.INFORMATION_MESSAGE);
            return; // Hentikan eksekusi jika keranjang kosong
        }

        // Gunakan StringBuilder untuk menyusun pesan
        StringBuilder detailKeranjang = new StringBuilder("Isi Keranjang Belanja Anda:\n\n");
        int totalBelanja = 0;

        // Iterasi melalui ArrayList keranjangBelanja
        for (Barang barang : keranjangBelanja) {
            detailKeranjang.append("- ")
                           .append(barang.getNama())
                           .append(" (Rp")
                           .append(barang.getHarga())
                           .append(")\n");
            totalBelanja += barang.getHarga();
        }

        detailKeranjang.append("\n--------------------\n");
        detailKeranjang.append("Total Belanja: Rp. ").append(totalBelanja);

        // Tampilkan semua barang yang ada di keranjang dalam satu pop-up
        JOptionPane.showMessageDialog(this, detailKeranjang.toString(), "Detail Keranjang Belanja", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_btnKeranjangActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnKeranjang;
    private javax.swing.JButton btnTambah;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblBarang;
    // End of variables declaration//GEN-END:variables
}
